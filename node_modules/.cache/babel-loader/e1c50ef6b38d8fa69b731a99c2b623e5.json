{"ast":null,"code":"var random = require('geojson-random');\n/**\n * Generates random {@link GeoJSON} data, including {@link Point|Points} and {@link Polygon|Polygons}, for testing\n * and experimentation.\n *\n * @name random\n * @param {String} [type='point'] type of features desired: 'points' or 'polygons'\n * @param {Number} [count=1] how many geometries should be generated.\n * @param {Object} options options relevant to the feature desired. Can include:\n * @param {Array<number>} options.bbox a bounding box inside of which geometries\n * are placed. In the case of {@link Point} features, they are guaranteed to be within this bounds,\n * while {@link Polygon} features have their centroid within the bounds.\n * @param {Number} [options.num_vertices=10] options.vertices the number of vertices added\n * to polygon features.\n * @param {Number} [options.max_radial_length=10] the total number of decimal\n * degrees longitude or latitude that a polygon can extent outwards to\n * from its center.\n * @return {FeatureCollection} generated random features\n * @example\n * var points = turf.random('points', 100, {\n *   bbox: [-70, 40, -60, 60]\n * });\n *\n * //=points\n *\n * var polygons = turf.random('polygons', 4, {\n *   bbox: [-70, 40, -60, 60]\n * });\n *\n * //=polygons\n */\n\n\nmodule.exports = function (type, count, options) {\n  options = options || {};\n  count = count || 1;\n\n  switch (type) {\n    case 'point':\n    case 'points':\n    case undefined:\n      return random.point(count, options.bbox);\n\n    case 'polygon':\n    case 'polygons':\n      return random.polygon(count, options.num_vertices, options.max_radial_length, options.bbox);\n\n    default:\n      throw new Error('Unknown type given: valid options are points and polygons');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}