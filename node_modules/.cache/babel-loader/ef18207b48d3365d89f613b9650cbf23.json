{"ast":null,"code":"//https://github.com/jasondavies/conrec.js\n//http://stackoverflow.com/questions/263305/drawing-a-topographical-map\nvar tin = require('turf-tin');\n\nvar inside = require('turf-inside');\n\nvar grid = require('turf-grid');\n\nvar bbox = require('turf-bbox');\n\nvar planepoint = require('turf-planepoint');\n\nvar featurecollection = require('turf-helpers').featureCollection;\n\nvar linestring = require('turf-helpers').lineString;\n\nvar square = require('turf-square');\n\nvar Conrec = require('./conrec');\n/**\n * Takes {@link Point|points} with z-values and an array of\n * value breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).\n *\n * @name isolines\n * @param {FeatureCollection<Point>} points input points\n * @param {string} z the property name in `points` from which z-values will be pulled\n * @param {number} resolution resolution of the underlying grid\n * @param {Array<number>} breaks where to draw contours\n * @returns {FeatureCollection<LineString>} isolines\n * @example\n * // create random points with random\n * // z-values in their properties\n * var points = turf.random('point', 100, {\n *   bbox: [0, 30, 20, 50]\n * });\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = Math.random() * 10;\n * }\n * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * var isolined = turf.isolines(points, 'z', 15, breaks);\n * //=isolined\n */\n\n\nmodule.exports = function (points, z, resolution, breaks) {\n  var tinResult = tin(points, z);\n  var bboxBBox = bbox(points);\n  var squareBBox = square(bboxBBox);\n  var gridResult = grid(squareBBox, resolution);\n  var data = [];\n\n  for (var i = 0; i < gridResult.features.length; i++) {\n    var pt = gridResult.features[i];\n\n    for (var j = 0; j < tinResult.features.length; j++) {\n      var triangle = tinResult.features[j];\n\n      if (inside(pt, triangle)) {\n        pt.properties = {};\n        pt.properties[z] = planepoint(pt, triangle);\n      }\n    }\n  }\n\n  var depth = Math.sqrt(gridResult.features.length);\n\n  for (var x = 0; x < depth; x++) {\n    var xGroup = gridResult.features.slice(x * depth, (x + 1) * depth);\n    var xFlat = [];\n\n    for (var g = 0; g < xGroup.length; g++) {\n      if (xGroup[g].properties) {\n        xFlat.push(xGroup[g].properties[z]);\n      } else {\n        xFlat.push(0);\n      }\n    }\n\n    data.push(xFlat);\n  }\n\n  var interval = (squareBBox[2] - squareBBox[0]) / depth;\n  var xCoordinates = [];\n  var yCoordinates = [];\n\n  for (var d = 0; d < depth; d++) {\n    xCoordinates.push(d * interval + squareBBox[0]);\n    yCoordinates.push(d * interval + squareBBox[1]);\n  }\n\n  var c = new Conrec();\n  c.contour(data, 0, resolution, 0, resolution, xCoordinates, yCoordinates, breaks.length, breaks);\n  var contourList = c.contourList();\n  var fc = featurecollection([]);\n  contourList.forEach(function (c) {\n    if (c.length > 2) {\n      var polyCoordinates = [];\n      c.forEach(function (coord) {\n        polyCoordinates.push([coord.x, coord.y]);\n      });\n      var poly = linestring(polyCoordinates);\n      poly.properties = {};\n      poly.properties[z] = c.level;\n      fc.features.push(poly);\n    }\n  });\n  return fc;\n};","map":null,"metadata":{},"sourceType":"script"}