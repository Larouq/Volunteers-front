{"ast":null,"code":"// 1. run tin on points\n// 2. calculate lenth of all edges and area of all triangles\n// 3. remove triangles that fail the max length test\n// 4. buffer the results slightly\n// 5. merge the results\nvar tin = require('turf-tin');\n\nvar union = require('turf-union');\n\nvar distance = require('turf-distance');\n/**\n * Takes a set of {@link Point|points} and returns a concave hull polygon.\n *\n * Internally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.\n *\n * @param {FeatureCollection<Point>} points input points\n * @param {number} maxEdge the size of an edge necessary for part of the\n * hull to become concave (in miles)\n * @param {string} units used for maxEdge distance (miles or kilometers)\n * @returns {Feature<Polygon>} a concave hull\n * @throws {Error} if maxEdge parameter is missing\n * @throws {Error} if units parameter is missing\n * @example\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.601226, 44.642643]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.591442, 44.651436]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.580799, 44.648749]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.573589, 44.641788]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.587665, 44.64533]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.595218, 44.64765]\n *       }\n *     }\n *   ]\n * };\n *\n * var hull = turf.concave(points, 1, 'miles');\n *\n * var resultFeatures = points.features.concat(hull);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\n\nfunction concave(points, maxEdge, units) {\n  if (typeof maxEdge !== 'number') throw new Error('maxEdge parameter is required');\n  if (typeof units !== 'string') throw new Error('units parameter is required');\n  var tinPolys = tin(points);\n  var filteredPolys = tinPolys.features.filter(filterTriangles);\n  tinPolys.features = filteredPolys;\n\n  function filterTriangles(triangle) {\n    var pt1 = triangle.geometry.coordinates[0][0];\n    var pt2 = triangle.geometry.coordinates[0][1];\n    var pt3 = triangle.geometry.coordinates[0][2];\n    var dist1 = distance(pt1, pt2, units);\n    var dist2 = distance(pt2, pt3, units);\n    var dist3 = distance(pt1, pt3, units);\n    return dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge;\n  }\n\n  return merge(tinPolys);\n}\n\nfunction merge(polygons) {\n  var merged = JSON.parse(JSON.stringify(polygons.features[0])),\n      features = polygons.features;\n\n  for (var i = 0, len = features.length; i < len; i++) {\n    var poly = features[i];\n\n    if (poly.geometry) {\n      merged = union(merged, poly);\n    }\n  }\n\n  return merged;\n}\n\nmodule.exports = concave;","map":null,"metadata":{},"sourceType":"script"}