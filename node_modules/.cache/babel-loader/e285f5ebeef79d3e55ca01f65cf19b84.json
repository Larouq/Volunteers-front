{"ast":null,"code":"var invariant = require('turf-invariant'); // http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point resides inside the polygon. The polygon can\n * be convex or concave. The function accounts for holes.\n *\n * @name inside\n * @param {Feature<Point>} point input point\n * @param {Feature<(Polygon|MultiPolygon)>} polygon input polygon or multipolygon\n * @return {Boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt1 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#f00\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-111.467285, 40.75766]\n *   }\n * };\n * var pt2 = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-111.873779, 40.647303]\n *   }\n * };\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-112.074279, 40.52215],\n *       [-112.074279, 40.853293],\n *       [-111.610107, 40.853293],\n *       [-111.610107, 40.52215],\n *       [-112.074279, 40.52215]\n *     ]]\n *   }\n * };\n *\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [pt1, pt2, poly]\n * };\n *\n * //=features\n *\n * var isInside1 = turf.inside(pt1, poly);\n * //=isInside1\n *\n * var isInside2 = turf.inside(pt2, poly);\n * //=isInside2\n */\n\n\nmodule.exports = function input(point, polygon) {\n  var pt = invariant.getCoord(point);\n  var polys = polygon.geometry.coordinates; // normalize to multipolygon\n\n  if (polygon.geometry.type === 'Polygon') polys = [polys];\n\n  for (var i = 0, insidePoly = false; i < polys.length && !insidePoly; i++) {\n    // check if it is in the outer ring first\n    if (inRing(pt, polys[i][0])) {\n      var inHole = false;\n      var k = 1; // check for the point in any of the holes\n\n      while (k < polys[i].length && !inHole) {\n        if (inRing(pt, polys[i][k])) {\n          inHole = true;\n        }\n\n        k++;\n      }\n\n      if (!inHole) insidePoly = true;\n    }\n  }\n\n  return insidePoly;\n}; // pt is [x,y] and ring is [[x,y], [x,y],..]\n\n\nfunction inRing(pt, ring) {\n  var isInside = false;\n\n  for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n    var xi = ring[i][0],\n        yi = ring[i][1];\n    var xj = ring[j][0],\n        yj = ring[j][1];\n    var intersect = yi > pt[1] !== yj > pt[1] && pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi;\n    if (intersect) isInside = !isInside;\n  }\n\n  return isInside;\n}","map":null,"metadata":{},"sourceType":"script"}