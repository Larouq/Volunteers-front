{"ast":null,"code":"//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\nvar getCoord = require('turf-invariant').getCoord;\n\nvar helpers = require('turf-helpers');\n\nvar point = helpers.point;\nvar distanceToRadians = helpers.distanceToRadians;\n/**\n * Takes a {@link Point} and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name destination\n * @param {Feature<Point>} from starting point\n * @param {number} distance distance from the starting point\n * @param {number} bearing ranging from -180 to 180\n * @param {String} [units=kilometers] miles, kilometers, degrees, or radians\n * @returns {Feature<Point>} destination point\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"marker-color\": \"#0f0\"\n *   },\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.343, 39.984]\n *   }\n * };\n * var distance = 50;\n * var bearing = 90;\n * var units = 'miles';\n *\n * var destination = turf.destination(point, distance, bearing, units);\n * destination.properties['marker-color'] = '#f00';\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [point, destination]\n * };\n *\n * //=result\n */\n\nmodule.exports = function (from, distance, bearing, units) {\n  var degrees2radians = Math.PI / 180;\n  var radians2degrees = 180 / Math.PI;\n  var coordinates1 = getCoord(from);\n  var longitude1 = degrees2radians * coordinates1[0];\n  var latitude1 = degrees2radians * coordinates1[1];\n  var bearing_rad = degrees2radians * bearing;\n  var radians = distanceToRadians(distance, units);\n  var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) + Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearing_rad));\n  var longitude2 = longitude1 + Math.atan2(Math.sin(bearing_rad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n  return point([radians2degrees * longitude2, radians2degrees * latitude2]);\n};","map":null,"metadata":{},"sourceType":"script"}