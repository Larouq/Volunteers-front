{"ast":null,"code":"var distance = require('turf-distance');\n\nvar point = require('turf-helpers').point;\n/**\n * Takes a {@link LineString|line} and measures its length in the specified units.\n *\n * @name lineDistance\n * @param {Feature<LineString>} line line to measure\n * @param {String} [units=kilometers] can be degrees, radians, miles, or kilometers\n * @return {Number} length of the input line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var length = turf.lineDistance(line, 'miles');\n *\n * //=line\n *\n * //=length\n */\n\n\nmodule.exports = function lineDistance(line, units) {\n  if (line.type === 'FeatureCollection') {\n    return line.features.reduce(function (memo, feature) {\n      return memo + lineDistance(feature, units);\n    }, 0);\n  }\n\n  var geometry = line.type === 'Feature' ? line.geometry : line;\n  var d, i;\n\n  if (geometry.type === 'LineString') {\n    return length(geometry.coordinates, units);\n  } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n    d = 0;\n\n    for (i = 0; i < geometry.coordinates.length; i++) {\n      d += length(geometry.coordinates[i], units);\n    }\n\n    return d;\n  } else if (line.type === 'MultiPolygon') {\n    d = 0;\n\n    for (i = 0; i < geometry.coordinates.length; i++) {\n      for (var j = 0; j < geometry.coordinates[i].length; j++) {\n        d += length(geometry.coordinates[i][j], units);\n      }\n    }\n\n    return d;\n  } else {\n    throw new Error('input must be a LineString, MultiLineString, ' + 'Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection ' + 'containing only those types)');\n  }\n};\n\nfunction length(coords, units) {\n  var travelled = 0;\n  var prevCoords = point(coords[0]);\n  var curCoords = point(coords[0]);\n  var temp;\n\n  for (var i = 1; i < coords.length; i++) {\n    curCoords.geometry.coordinates = coords[i];\n    travelled += distance(prevCoords, curCoords, units);\n    temp = prevCoords;\n    prevCoords = curCoords;\n    curCoords = temp;\n  }\n\n  return travelled;\n}","map":null,"metadata":{},"sourceType":"script"}