{"ast":null,"code":"var featurecollection = require('turf-helpers').featureCollection;\n\nvar point = require('turf-helpers').point;\n\nvar polygon = require('turf-helpers').polygon;\n\nvar distance = require('turf-distance');\n/**\n * Takes a bounding box and a cell depth and returns a set of square {@link Polygon|polygons} in a grid.\n *\n * @name squareGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSize width of each cell\n * @param {string} units units to use for cellWidth\n * @return {FeatureCollection<Polygon>} grid a grid of polygons\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var squareGrid = turf.squareGrid(extent, cellWidth, units);\n *\n * //=squareGrid\n */\n\n\nmodule.exports = function squareGrid(bbox, cellSize, units) {\n  var fc = featurecollection([]);\n  var xFraction = cellSize / distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units);\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cellSize / distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units);\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n  var currentX = bbox[0];\n\n  while (currentX <= bbox[2]) {\n    var currentY = bbox[1];\n\n    while (currentY <= bbox[3]) {\n      var cellPoly = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]]);\n      fc.features.push(cellPoly);\n      currentY += cellHeight;\n    }\n\n    currentX += cellWidth;\n  }\n\n  return fc;\n};","map":null,"metadata":{},"sourceType":"script"}