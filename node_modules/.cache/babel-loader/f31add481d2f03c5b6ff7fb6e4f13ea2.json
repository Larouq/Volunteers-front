{"ast":null,"code":"/**\n * Takes a triangular plane as a {@link Polygon}\n * and a {@link Point} within that triangle and returns the z-value\n * at that point. The Polygon needs to have properties `a`, `b`, and `c`\n * that define the values at its three corners.\n *\n * @name planepoint\n * @param {Feature<Point>} point the Point for which a z-value will be calculated\n * @param {Feature<Polygon>} triangle a Polygon feature with three vertices\n * @return {Number} the z-value for `interpolatedPoint`\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-75.3221, 39.529]\n *   }\n * };\n * var point = turf.point([-75.3221, 39.529]);\n * // triangle is a polygon with \"a\", \"b\",\n * // and \"c\" values representing\n * // the values of the coordinates in order.\n * var triangle = {\n *   \"type\": \"Feature\",\n *   \"properties\": {\n *     \"a\": 11,\n *     \"b\": 122,\n *     \"c\": 44\n *   },\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-75.1221, 39.57],\n *       [-75.58, 39.18],\n *       [-75.97, 39.86],\n *       [-75.1221, 39.57]\n *     ]]\n *   }\n * };\n *\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [triangle, point]\n * };\n *\n * var zValue = turf.planepoint(point, triangle);\n *\n * //=features\n *\n * //=zValue\n */\nmodule.exports = function (point, triangle) {\n  var x = point.geometry.coordinates[0],\n      y = point.geometry.coordinates[1],\n      x1 = triangle.geometry.coordinates[0][0][0],\n      y1 = triangle.geometry.coordinates[0][0][1],\n      z1 = triangle.properties.a,\n      x2 = triangle.geometry.coordinates[0][1][0],\n      y2 = triangle.geometry.coordinates[0][1][1],\n      z2 = triangle.properties.b,\n      x3 = triangle.geometry.coordinates[0][2][0],\n      y3 = triangle.geometry.coordinates[0][2][1],\n      z3 = triangle.properties.c;\n  var z = (z3 * (x - x1) * (y - y2) + z1 * (x - x2) * (y - y3) + z2 * (x - x3) * (y - y1) - z2 * (x - x1) * (y - y3) - z3 * (x - x2) * (y - y1) - z1 * (x - x3) * (y - y2)) / ((x - x1) * (y - y2) + (x - x2) * (y - y3) + (x - x3) * (y - y1) - (x - x1) * (y - y3) - (x - x2) * (y - y1) - (x - x3) * (y - y2));\n  return z;\n};","map":null,"metadata":{},"sourceType":"script"}