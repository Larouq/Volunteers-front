{"ast":null,"code":"var inside = require('turf-inside');\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and performs a spatial join.\n *\n * @name tag\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon>} polygons input polygons\n * @param {string} field property in `polygons` to add to joined Point features\n * @param {string} outField property in `points` in which to store joined property from `polygons\n * @return {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var bbox = [0, 0, 10, 10];\n * // create a triangular grid of polygons\n * var triangleGrid = turf.triangleGrid(bbox, 50, 'miles');\n * triangleGrid.features.forEach(function(f) {\n *   f.properties.fill = '#' +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16);\n *   f.properties.stroke = 0;\n *   f.properties['fill-opacity'] = 1;\n * });\n * var randomPoints = turf.random('point', 30, {\n *   bbox: bbox\n * });\n * var both = turf.featurecollection(\n *   triangleGrid.features.concat(randomPoints.features));\n *\n * //=both\n *\n * var tagged = turf.tag(randomPoints, triangleGrid,\n *                       'fill', 'marker-color');\n *\n * //=tagged\n */\n\n\nmodule.exports = function (points, polygons, field, outField) {\n  // prevent mutations\n  points = JSON.parse(JSON.stringify(points));\n  polygons = JSON.parse(JSON.stringify(polygons));\n  points.features.forEach(function (pt) {\n    if (!pt.properties) {\n      pt.properties = {};\n    }\n\n    polygons.features.forEach(function (poly) {\n      if (pt.properties[outField] === undefined) {\n        var isInside = inside(pt, poly);\n\n        if (isInside) {\n          pt.properties[outField] = poly.properties[field];\n        }\n      }\n    });\n  });\n  return points;\n};","map":null,"metadata":{},"sourceType":"script"}